// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: SPL.flex

package com.bamuel.spllang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.bamuel.spllang.psi.SPLTypes;
import com.intellij.psi.TokenType;


class SPLLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\0\1\4\4\0\1\5\1\6\1\7\1\10\1\0"+
    "\1\11\1\12\1\13\1\14\12\15\1\0\1\16\1\0"+
    "\1\17\2\0\1\20\1\21\1\22\1\23\1\22\1\24"+
    "\1\25\5\22\1\26\1\22\1\27\1\30\1\31\1\22"+
    "\1\32\1\33\1\34\1\35\3\22\1\36\1\37\4\0"+
    "\1\22\1\0\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\22\1\60\1\61\1\62\1\63\1\64"+
    "\1\22\1\65\1\66\1\22\1\67\1\0\1\70\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\1\11\1\12\25\13\1\14\1\15"+
    "\1\0\1\16\1\0\1\17\1\20\1\13\1\21\33\13"+
    "\1\17\5\13\1\22\26\13\1\17\31\13\1\21\34\13";

  private static int [] zzUnpackAction() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\71\0\71\0\71"+
    "\0\71\0\u011d\0\u0156\0\71\0\71\0\71\0\u018f\0\u01c8"+
    "\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357\0\u0390"+
    "\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f\0\u0558"+
    "\0\u0591\0\u05ca\0\u0603\0\71\0\71\0\253\0\71\0\344"+
    "\0\u063c\0\u0675\0\u06ae\0\u018f\0\u06e7\0\u0720\0\u0759\0\u0792"+
    "\0\u07cb\0\u0804\0\u083d\0\u0876\0\u08af\0\u08e8\0\u0921\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22"+
    "\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea"+
    "\0\u0d23\0\u0d5c\0\u0d95\0\u0dce\0\u0e07\0\u018f\0\u0e40\0\u0e79"+
    "\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041"+
    "\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209"+
    "\0\u1242\0\u127b\0\u12b4\0\u12ed\0\71\0\u1326\0\u135f\0\u1398"+
    "\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee\0\u1527\0\u1560"+
    "\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6\0\u16ef\0\u1728"+
    "\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e\0\u18b7\0\u18f0"+
    "\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46\0\u1a7f\0\u1ab8"+
    "\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e\0\u1c47\0\u1c80"+
    "\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6\0\u1e0f\0\u1e48"+
    "\0\u1e81\0\u1eba\0\u1ef3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\2\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\2\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\4\17\1\20\1\17\1\21\3\17\1\22\1\23\1\17"+
    "\1\24\1\25\1\26\1\27\1\17\1\30\1\31\1\32"+
    "\1\33\1\17\1\34\2\17\1\35\1\36\1\17\1\37"+
    "\1\40\1\41\1\42\2\17\1\43\2\17\1\44\1\45"+
    "\72\0\2\3\66\0\4\46\1\47\64\46\5\50\1\47"+
    "\63\50\10\0\1\51\3\0\1\52\71\0\1\13\65\0"+
    "\1\17\2\0\1\17\3\0\46\17\14\0\1\17\2\0"+
    "\1\17\3\0\1\53\45\17\14\0\1\17\2\0\1\17"+
    "\3\0\7\17\1\54\36\17\14\0\1\17\2\0\1\17"+
    "\3\0\10\17\1\55\35\17\14\0\1\17\2\0\1\17"+
    "\3\0\11\17\1\56\34\17\14\0\1\17\2\0\1\17"+
    "\3\0\3\17\1\57\42\17\14\0\1\17\2\0\1\17"+
    "\3\0\3\17\1\60\42\17\14\0\1\17\2\0\1\17"+
    "\3\0\21\17\1\61\2\17\1\62\11\17\1\63\7\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\64\13\17"+
    "\1\65\6\17\14\0\1\17\2\0\1\17\3\0\23\17"+
    "\1\66\3\17\1\67\5\17\1\54\10\17\14\0\1\17"+
    "\2\0\1\17\3\0\34\17\1\70\7\17\1\71\1\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\72\16\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\73\22\17"+
    "\14\0\1\17\2\0\1\17\3\0\34\17\1\74\11\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\75\5\17"+
    "\1\76\10\17\14\0\1\17\2\0\1\17\3\0\23\17"+
    "\1\77\11\17\1\100\10\17\14\0\1\17\2\0\1\17"+
    "\3\0\20\17\1\101\15\17\1\102\7\17\14\0\1\17"+
    "\2\0\1\17\3\0\17\17\1\103\17\17\1\104\6\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\105\22\17"+
    "\14\0\1\17\2\0\1\17\3\0\21\17\1\106\1\17"+
    "\1\73\22\17\14\0\1\17\2\0\1\17\3\0\23\17"+
    "\1\107\22\17\2\0\10\51\1\110\60\51\2\52\2\0"+
    "\65\52\12\0\1\17\2\0\1\17\3\0\5\17\1\111"+
    "\40\17\14\0\1\17\2\0\1\17\3\0\1\112\45\17"+
    "\14\0\1\17\2\0\1\17\3\0\14\17\1\113\31\17"+
    "\14\0\1\17\2\0\1\17\3\0\12\17\1\54\33\17"+
    "\14\0\1\17\2\0\1\17\3\0\11\17\1\21\34\17"+
    "\14\0\1\17\2\0\1\17\3\0\21\17\1\114\24\17"+
    "\14\0\1\17\2\0\1\17\3\0\41\17\1\115\4\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\116\16\17"+
    "\14\0\1\17\2\0\1\17\3\0\24\17\1\117\21\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\120\22\17"+
    "\14\0\1\17\2\0\1\17\3\0\41\17\1\121\4\17"+
    "\14\0\1\17\2\0\1\17\3\0\40\17\1\122\5\17"+
    "\14\0\1\17\2\0\1\17\3\0\22\17\1\123\23\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\73\16\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\124\22\17"+
    "\14\0\1\17\2\0\1\17\3\0\41\17\1\54\4\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\125\16\17"+
    "\14\0\1\17\2\0\1\17\3\0\34\17\1\126\11\17"+
    "\14\0\1\17\2\0\1\17\3\0\21\17\1\127\24\17"+
    "\14\0\1\17\2\0\1\17\3\0\34\17\1\130\11\17"+
    "\14\0\1\17\2\0\1\17\3\0\22\17\1\131\23\17"+
    "\14\0\1\17\2\0\1\17\3\0\30\17\1\132\15\17"+
    "\14\0\1\17\2\0\1\17\3\0\23\17\1\133\22\17"+
    "\14\0\1\17\2\0\1\17\3\0\37\17\1\134\6\17"+
    "\14\0\1\17\2\0\1\17\3\0\27\17\1\135\5\17"+
    "\1\136\10\17\14\0\1\17\2\0\1\17\3\0\23\17"+
    "\1\137\1\140\11\17\1\141\2\17\1\142\4\17\14\0"+
    "\1\17\2\0\1\17\3\0\37\17\1\143\6\17\14\0"+
    "\1\17\2\0\1\17\3\0\37\17\1\144\6\17\2\0"+
    "\10\51\1\110\3\51\1\145\54\51\12\0\1\17\2\0"+
    "\1\17\3\0\12\17\1\113\33\17\14\0\1\17\2\0"+
    "\1\17\3\0\2\17\1\24\43\17\14\0\1\17\2\0"+
    "\1\17\3\0\3\17\1\54\42\17\14\0\1\17\2\0"+
    "\1\17\3\0\23\17\1\146\22\17\14\0\1\17\2\0"+
    "\1\17\3\0\23\17\1\147\22\17\14\0\1\17\2\0"+
    "\1\17\3\0\35\17\1\150\10\17\14\0\1\17\2\0"+
    "\1\17\3\0\17\17\1\126\26\17\14\0\1\17\2\0"+
    "\1\17\3\0\17\17\1\151\26\17\14\0\1\17\2\0"+
    "\1\17\3\0\36\17\1\152\7\17\14\0\1\153\2\0"+
    "\1\17\3\0\17\17\1\154\16\17\1\155\1\17\1\156"+
    "\5\17\14\0\1\17\2\0\1\17\3\0\32\17\1\157"+
    "\13\17\14\0\1\17\2\0\1\17\3\0\41\17\1\160"+
    "\4\17\14\0\1\17\2\0\1\17\3\0\31\17\1\54"+
    "\14\17\14\0\1\17\2\0\1\17\3\0\17\17\1\161"+
    "\26\17\14\0\1\17\2\0\1\17\3\0\42\17\1\54"+
    "\3\17\14\0\1\17\2\0\1\17\3\0\23\17\1\54"+
    "\22\17\14\0\1\17\2\0\1\17\3\0\23\17\1\162"+
    "\22\17\14\0\1\17\2\0\1\17\3\0\34\17\1\54"+
    "\11\17\14\0\1\17\2\0\1\17\3\0\17\17\1\163"+
    "\26\17\14\0\1\17\2\0\1\17\3\0\33\17\1\164"+
    "\1\73\11\17\14\0\1\17\2\0\1\17\3\0\21\17"+
    "\1\165\24\17\14\0\1\17\2\0\1\17\3\0\34\17"+
    "\1\62\11\17\14\0\1\17\2\0\1\17\3\0\37\17"+
    "\1\166\6\17\14\0\1\17\2\0\1\17\3\0\35\17"+
    "\1\167\10\17\14\0\1\17\2\0\1\17\3\0\42\17"+
    "\1\170\3\17\14\0\1\17\2\0\1\17\3\0\23\17"+
    "\1\171\22\17\14\0\1\17\2\0\1\17\3\0\40\17"+
    "\1\172\5\17\14\0\1\17\2\0\1\17\3\0\36\17"+
    "\1\73\7\17\14\0\1\17\2\0\1\17\3\0\37\17"+
    "\1\54\6\17\14\0\1\17\2\0\1\17\3\0\37\17"+
    "\1\131\6\17\14\0\1\17\2\0\1\17\3\0\27\17"+
    "\1\173\16\17\14\0\1\17\2\0\1\17\3\0\32\17"+
    "\1\174\13\17\14\0\1\17\2\0\1\17\3\0\17\17"+
    "\1\154\16\17\1\155\1\17\1\156\5\17\14\0\1\17"+
    "\2\0\1\17\3\0\36\17\1\63\7\17\14\0\1\17"+
    "\2\0\1\17\3\0\37\17\1\175\6\17\14\0\1\17"+
    "\2\0\1\17\3\0\21\17\1\106\24\17\14\0\1\17"+
    "\2\0\1\17\3\0\22\17\1\54\23\17\14\0\1\17"+
    "\2\0\1\17\3\0\27\17\1\176\16\17\14\0\1\17"+
    "\2\0\1\17\3\0\32\17\1\177\13\17\14\0\1\17"+
    "\2\0\1\17\3\0\21\17\1\73\24\17\14\0\1\17"+
    "\2\0\1\17\3\0\33\17\1\200\12\17\14\0\1\17"+
    "\2\0\1\17\3\0\17\17\1\201\26\17\14\0\1\17"+
    "\2\0\1\17\3\0\23\17\1\202\22\17\14\0\1\17"+
    "\2\0\1\17\3\0\23\17\1\203\22\17\14\0\1\17"+
    "\2\0\1\17\3\0\37\17\1\73\6\17\14\0\1\17"+
    "\2\0\1\17\3\0\37\17\1\204\6\17\14\0\1\17"+
    "\2\0\1\17\3\0\23\17\1\205\22\17\14\0\1\17"+
    "\2\0\1\17\3\0\27\17\1\206\16\17\14\0\1\17"+
    "\2\0\1\17\3\0\32\17\1\54\13\17\14\0\1\17"+
    "\2\0\1\17\3\0\17\17\1\207\26\17\14\0\1\17"+
    "\2\0\1\17\3\0\35\17\1\136\10\17\14\0\1\17"+
    "\2\0\1\17\3\0\17\17\1\210\26\17\14\0\1\17"+
    "\2\0\1\17\3\0\24\17\1\32\21\17\14\0\1\17"+
    "\2\0\1\17\3\0\23\17\1\211\22\17\14\0\1\17"+
    "\2\0\1\17\3\0\37\17\1\207\6\17\14\0\1\17"+
    "\2\0\1\17\3\0\22\17\1\212\23\17\14\0\1\17"+
    "\2\0\1\17\3\0\40\17\1\213\5\17\14\0\1\17"+
    "\2\0\1\17\3\0\34\17\1\214\11\17\14\0\1\17"+
    "\2\0\1\17\3\0\34\17\1\116\11\17\14\0\1\17"+
    "\2\0\1\17\3\0\35\17\1\215\10\17\14\0\1\17"+
    "\2\0\1\17\3\0\45\17\1\54\14\0\1\17\2\0"+
    "\1\17\3\0\32\17\1\216\13\17\14\0\1\17\2\0"+
    "\1\17\3\0\41\17\1\217\4\17\14\0\1\17\2\0"+
    "\1\17\3\0\42\17\1\220\3\17\14\0\1\17\2\0"+
    "\1\17\3\0\26\17\1\54\17\17\14\0\1\17\2\0"+
    "\1\17\3\0\27\17\1\221\16\17\14\0\1\17\2\0"+
    "\1\17\3\0\34\17\1\222\11\17\14\0\1\17\2\0"+
    "\1\17\3\0\27\17\1\223\16\17\14\0\1\17\2\0"+
    "\1\17\3\0\23\17\1\224\22\17\14\0\1\17\2\0"+
    "\1\17\3\0\37\17\1\225\6\17\14\0\1\17\2\0"+
    "\1\17\3\0\34\17\1\226\11\17\14\0\1\227\2\0"+
    "\1\17\3\0\46\17\14\0\1\17\2\0\1\17\3\0"+
    "\40\17\1\131\5\17\14\0\1\17\2\0\1\17\3\0"+
    "\37\17\1\230\6\17\14\0\1\17\2\0\1\17\3\0"+
    "\23\17\1\116\22\17\14\0\1\17\2\0\1\17\3\0"+
    "\25\17\1\54\20\17\14\0\1\17\2\0\1\17\3\0"+
    "\34\17\1\231\11\17\14\0\1\17\2\0\1\17\3\0"+
    "\40\17\1\54\5\17\14\0\1\17\2\0\1\17\3\0"+
    "\42\17\1\232\3\17\14\0\1\17\2\0\1\17\3\0"+
    "\33\17\1\233\12\17\14\0\1\17\2\0\1\17\3\0"+
    "\20\17\1\115\25\17\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[7980];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\4\11\2\1\3\11\25\1\2\11"+
    "\1\0\1\11\1\0\74\1\1\11\66\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[155];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SPLLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 19: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 20: break;
          case 3:
            { return SPLTypes.LPAREN;
            }
          // fall through
          case 21: break;
          case 4:
            { return SPLTypes.RPAREN;
            }
          // fall through
          case 22: break;
          case 5:
            { return SPLTypes.COMMA;
            }
          // fall through
          case 23: break;
          case 6:
            { return SPLTypes.DOT;
            }
          // fall through
          case 24: break;
          case 7:
            { return SPLTypes.NUMBER;
            }
          // fall through
          case 25: break;
          case 8:
            { return SPLTypes.SEMICOLON;
            }
          // fall through
          case 26: break;
          case 9:
            { return SPLTypes.EQUALS;
            }
          // fall through
          case 27: break;
          case 10:
            { return SPLTypes.AT;
            }
          // fall through
          case 28: break;
          case 11:
            { return SPLTypes.IDENTIFIER;
            }
          // fall through
          case 29: break;
          case 12:
            { return SPLTypes.LBRACE;
            }
          // fall through
          case 30: break;
          case 13:
            { return SPLTypes.RBRACE;
            }
          // fall through
          case 31: break;
          case 14:
            { return SPLTypes.STRING;
            }
          // fall through
          case 32: break;
          case 15:
            { return SPLTypes.BLOCK_COMMENT;
            }
          // fall through
          case 33: break;
          case 16:
            { return SPLTypes.COMMENT;
            }
          // fall through
          case 34: break;
          case 17:
            { return SPLTypes.KEYWORD;
            }
          // fall through
          case 35: break;
          case 18:
            { return SPLTypes.FUNCTION_DECLARATION;
            }
          // fall through
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
