{
  parserClass="com.bamuel.spllang.parser.SPLParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="SPL"
  psiImplClassSuffix="Impl"
  psiPackage="com.bamuel.spllang.psi"
  psiImplPackage="com.bamuel.spllang.psi.impl"

  elementTypeHolderClass="com.bamuel.spllang.psi.SPLTypes"
  elementTypeClass="com.bamuel.spllang.psi.SPLElementType"
  tokenTypeClass="com.bamuel.spllang.psi.SPLTokenType"
}

splFile ::= item_*

item_ ::=  declaration_ | statement_ | preprocessor_ | function_ | element_
    declaration_ ::= api_ | field_ | local_ | menu_ | object_ | parameter_ | procedure_ | returning_ | screen_
    statement_ ::= messagebox_ | message_
    preprocessor_ ::= preprocessors_ //Pre-processor commands summary //todo: split into individual preprocessor commands
    function_ ::= environmentfunction_ | stringfunction_
        environmentfunction_ ::= getenv_
        stringfunction_ ::= paramtext_ | concat_ | strconcat_ | str_

//Syntax message-box  alpha-expression
messagebox_ ::= MESSAGEBOX alphaexpression_ messsageboxtitle_? messageboxbuttons_? messageboxdefault_? messageboxicon_? messageboxtag_? messageboxhelpcontext_? messageboxoptional_? messageboxbell_? item_* //todo: figure out what the end of a messagebox default is.
alphaexpression_ ::= STRING | IDENTIFIER | stringfunction_
messsageboxtitle_ ::= TITLE ("is")? string_
messageboxbuttons_ ::= MESSAGEBOX_BUTTONS MESSAGEBOX_BUTTONS_VALUES
messageboxdefault_ ::= DEFAULT ("is")? MESSAGEBOX_BUTTONS_VALUES
messageboxicon_ ::= ICON ("is")? MESSAGEBOX_ICON_VALUES
messageboxtag_ ::= TAG ("is")? NUMBER
messageboxhelpcontext_ ::= HELP_CONTEXT alphaexpression_
messageboxoptional_ ::= OPTIONAL
messageboxbell_ ::= BELL


//Syntax PARAM-TEXT(text,params)
paramtext_ ::= PARAMTEXT LPAREN STRING (COMMA param_list_)? RPAREN
param_list_ ::= string_ (COMMA string_)*

//Syntax CONCAT(string1,string2,...)
concat_ ::= CONCAT LPAREN string_ (COMMA? string_)* RPAREN
//Syntax STR-CONCAT(string1,string2,...)
strconcat_ ::= STRCONCAT LPAREN string_ (COMMA? string_)* RPAREN

//Syntax STR(number)
str_ ::= STR_FUNC LPAREN number_ RPAREN

//message expression [pic [is] picture-string]
//   [expression [pic[ture] [is] expression]] ....
//   [no-bell]
message_ ::= MESSAGE (string_)? (NOBELL)?

//Syntax GET-ENV(name)
getenv_ ::= GETENV LPAREN string_ RPAREN

//PREPROCESSOR
//Syntax #include "filename"
preprocessors_ ::= PREPROCESSOR (BAD_CHARACTER)?

//screen
screen_ ::= SCREEN IDENTIFIER (SCREEN_RESPONSIVE)? (screenwindow_)? (screenwindowpositivion)? (screentitle_)? (screenprimary_)? (screenselect_)? (screenquicklink_)? (screencolour_)? (screenreview_)? (screenallowed_)? (SCREEN_PROMPT_FOR_SEARCH)? (SCREEN_FIND_FOR_CURRENCY)? (screenprompt_)? (screendatagrid_)? (screenreviewoccurs)? (SCREEN_REVIEW_FROM_START)? (SCREEN_NO_REVIEW_ROW_SEPARATORS)? (SCREEN_NO_REVIEW_COLUMN_SEPARATORS)? (SCREEN_NO_REVIEW_SEPARATORS)? (SCREEN_START_ON_CURRENT_RECORD)? (SCREEN_LEAVE_PARENT_SCREEN)? (screenwhen_)? (screenlocal_)? (screenparameters_)? (screenreturning_)? (STOP_EXIT_ALL_KEY)? (SCREEN_POSITION_ON_OK)? (SCREEN_STAY_IN_CORRECT)? (SCREEN_FORM_ENTRY)? (screenexport_)? (screenhelpcontext_)? (screenbefore_)? (screendetail_)? (screenafter_)? SCREEN_END
screenwindow_ ::= WINDOW rowcol_ "to" rowcol_ (screenrelative_)?
screenrelative_ ::= RELATIVE_TO "to" rowcol_
screenwindowpositivion ::= WINDOW_POSITION ("is")? number_
screentitle_ ::= TITLE string_
screenprimary_ ::= SCREEN_PRIMARY IDENTIFIER (SCREEN_ON)? (SCREEN_SAME_DIFFERENT (fieldlist_*))?
screenselect_ ::= SCREEN_SELECT selectclauses_
screenquicklink_ ::= SCREEN_QUICK_LINK ("on")? IDENTIFIER
screencolour_ ::= COLOUR ("is")? IDENTIFIER ("on")? IDENTIFIER
screenreview_ ::= SCREEN_REVIEW ("is")? "colour" ("on")? IDENTIFIER
screenallowed_ ::= SCREEN_ALLOWED ("is"|"are")? ("FIND"|"NEXT"|"PREV"|"NEXT-SCR"|"PREV-SCR"|"find"|"next"|"prev"|"next-scr"|"prev-scr") item_* //todo: [mode-name ...]]
screenprompt_ ::= PROMPT rowcol_
screendatagrid_ ::= SCREEN_DATA_GRID item_* //todo: datagrid
screenreviewoccurs ::= SCREEN_REVIEW_OCCURS number_ ("by" number_)?
screenwhen_ ::= SCREEN_WHEN item_* //todo: conditon
screenlocal_ ::= LOCAL fieldlist_*
screenparameters_ ::= PARAMETERS ("are") fieldlist_*
screenreturning_ ::= RETURNING fieldlist_*
screenexport_ ::= EXPORT (CAN_OVERRIDE)?
screenhelpcontext_ ::= SCREEN_HELP_CONTEXT ("is") string_ string_
screenbefore_ ::= BEFORE item_* //todo: procedural-statements
screendetail_ ::= DETAIL item_* //todo: procedural-statements
screenafter_ ::= AFTER item_* //todo: procedural-statements

procedure_ ::= PROCEDURE IDENTIFIER item_* PROCEDURE_END//todo: procedural-statements
api_ ::= API IDENTIFIER item_* API_END //todo: procedural-statements

field_ ::= FIELD (IDENTIFIER fieldclauses_)*
fieldclauses_ ::= (fieldtype_)? (fieldpic_)? (fieldoccurs_)? (fieldlike_)? (fieldcase_)? (JUSTIFY)? (USE_NAME_IN_DB)? (fielddbcolumnname_)? (fielddrillback_)?
fieldtype_ ::= TYPE ("is")? datatypes_
datatypes_ ::= ("NUMERIC"|"DECIMAL"|"MONEY"|"FLOATING"|"ALPHA"|"STRING"|"VARCHAR"|"BLOB"|"XML-HANDLE"|"DATE"|"TIME"|"DATE-TIME"|"DATETIME"|"DATE_TIME"|"LOCAL-DATE-TIME"|"BOOLEAN"|"COLOUR"|"COLOR"|"OLE-INTERFACE"|"numeric"|"decimal"|"money"|"floating"|"alpha"|"string"|"varchar"|"blob"|"xml-handle"|"date"|"time"|"date-time"|"datetime"|"date_time"|"local-date-time"|"boolean"|"colour"|"color"|"ole-interface")
fieldpic_ ::= PIC ("is")? picture_
fieldoccurs_ ::= OCCURS NUMBER ("times")?
fieldlike_ ::= LIKE IDENTIFIER
fieldcase_ ::= ("UPPERCASE" | "LOWERCASE" | "uppercase" | "lowercase")
fielddbcolumnname_ ::= DB_COLUMN_NAME ("is")? string_
fielddrillback_ ::= DRILL_BACK ("is")? string_

//local fields
local_ ::= LOCAL (FIELD)? (IDENTIFIER fieldclauses_)*

//menu
menu_ ::= MENU IDENTIFIER item_* MENU_END //todo: menu items



//row and col
//Syntax @row,col
rowcol_ ::= AT NUMBER COMMA NUMBER
fieldlist_ ::= IDENTIFIER ((COMMA string_)?)*
selectclauses_ ::= "SELECT" item_* //todo: sql select

string_ ::= STRING | IDENTIFIER | BAD_CHARACTER | stringfunction_
number_ ::= NUMBER | IDENTIFIER
//The following picture string characters are used to specify the format of a field being defined.
// They indicate the size of the field, number of integer/decimal places and whether the field allows negative amounts.
// todo: add more picture string characters, this covers the basics.
picture_ ::= pic_group_ | pic_words
pic_words ::= "ddmmmyybhh:mm"  // Date and time format
pic_group_ ::= (NUMBER | IDENTIFIER) (LPAREN number_ RPAREN)? (IDENTIFIER LPAREN number_ RPAREN)?

element_ ::= FUNCTION_DECLARATION
           | KEYWORD
           | STRING
           | NUMBER
           | IDENTIFIER
           | COMMENT
           | BLOCK_COMMENT
           | TITLE
           | DEFAULT
           | WINDOW
           | PROMPT
           | DETAIL
           | ICON
           | TAG
           | HELP_CONTEXT
           | OPTIONAL
           | BELL
           | NOBELL
           | COLOUR
           | TYPE
           | PIC
           | OCCURS
           | LIKE
           | JUSTIFY
           | USE_NAME_IN_DB
           | DB_COLUMN_NAME
           | DRILL_BACK
           | RELATIVE_TO
           | WINDOW_POSITION
           | PARAMETERS
           | RETURNING
           | STOP_EXIT_ALL_KEY
           | EXPORT
           | CAN_OVERRIDE
           | BEFORE
           | AFTER
           | LOCAL
           | MESSAGEBOX_BUTTONS_VALUES
           | MESSAGEBOX_ICON_VALUES
           | othersymbols_

othersymbols_ ::= SYMBOLS | SEMICOLON | DOT | EQUALS | LBRACE | RBRACE | LPAREN | RPAREN | COMMA | AT